#pragma kernel CSMain
#pragma multi_compile_local WIWIW_THREADS_PER_WAVE_16 WIWIW_THREADS_PER_WAVE_32 WIWIW_THREADS_PER_WAVE_64

// --------------------------------------------------------

#include "../../Utilities/Shaders/Library/GetFadeGradient.hlsl"
#include "../../Utilities/Shaders/Library/GetGlobalBufferCoord3D.hlsl"
#include "../../Utilities/Shaders/Library/GetLineIntersectPlaneY.hlsl"
#include "../../Utilities/Shaders/Library/GetPointOnCubemap.hlsl"
#include "../../Utilities/Shaders/Library/GetRayTime.hlsl"
#include "../../Utilities/Shaders/Library/GetRemap.hlsl"
#include "../../Utilities/Shaders/Library/GetRemapUnclamped.hlsl"
#include "../../Utilities/Shaders/Library/IsNaN.hlsl"
#include "../../Utilities/Shaders/Library/WaveFrontMultiCompile.hlsl"
#include "Library/GetClouds.hlsl"
#include "Library/GetShadow.hlsl"

// --------------------------------------------------------

RWTexture2D<float4> _Wiwiw_CubemapTexture;

float _Wiwiw_CubemapFaceID;

float3 _Wiwiw_CameraPosition;

float _Wiwiw_SkyboxSamplesCountVal;

float _Wiwiw_SkyboxSamplesCountRcp;

float _Wiwiw_SkyboxDensity;

// --------------------------------------------------------

WIWIW_NUMTHREADS
void CSMain(in uint3 id : SV_DispatchThreadID)
{
    float isValid = 1.0;

    const uint2 indexInCube = Wiwiw_GetGlobalBufferIndex3D(id.x).xy;
    const float2 coordInCube = Wiwiw_GetRemap(Wiwiw_GetGlobalBufferCoord3D(id.x).xy, float2(0.0, 0.0), float2(1.0, 1.0), float2(0.0, 1.0), float2(1.0, 0.0));

    const float3 viewPosWS = _Wiwiw_CameraPosition;
    const float3 viewDirWS = normalize(Wiwiw_GetRemap(Wiwiw_GetPointOnCubemap(coordInCube, _Wiwiw_CubemapFaceID), 0.0, 1.0, -1.0, 1.0));

    const float cloudsLowerPlaneWS = _Wiwiw_CloudsGradientParams[0];
    const float cloudsUpperPlaneWS = _Wiwiw_CloudsGradientParams[3];

    const float3 intersectLowerPosWS = Wiwiw_GetLineIntersectPlaneY(viewPosWS, viewDirWS, cloudsLowerPlaneWS);
    const float3 intersectUpperPosWS = Wiwiw_GetLineIntersectPlaneY(viewPosWS, viewDirWS, cloudsUpperPlaneWS);
    isValid = !Wiwiw_IsNaN(intersectLowerPosWS) && !Wiwiw_IsNaN(intersectUpperPosWS) ? isValid : 0.0;

    const float viewRayTime = Wiwiw_GetRayTime(viewPosWS, viewPosWS, viewDirWS);
    const float intersectLowerRayTime = Wiwiw_GetRayTime(intersectLowerPosWS, viewPosWS, viewDirWS);
    const float intersectUpperRayTime = Wiwiw_GetRayTime(intersectUpperPosWS, viewPosWS, viewDirWS);
    isValid = intersectLowerRayTime >= viewRayTime || intersectUpperRayTime >= viewRayTime ? isValid : 0.0;

    float4 pointsForSorting[3] =
    {
        float4(viewPosWS, viewRayTime),
        float4(intersectLowerPosWS, intersectLowerRayTime),
        float4(intersectUpperPosWS, intersectUpperRayTime),
    };

    for (float i = 0.0; i < 3.0; i++)
    {
        for (float j = i + 1.0; j < 3.0; j++)
        {
            const float4 pointI = pointsForSorting[i];
            const float4 pointJ = pointsForSorting[j];

            const float needSwap = pointI.w > pointJ.w;

            pointsForSorting[i] = needSwap ? pointJ : pointI;
            pointsForSorting[j] = needSwap ? pointI : pointJ;
        }
    }

    const float3 sampleStartPosWS = pointsForSorting[2].xyz;
    const float3 sampleFinalPosWS = pointsForSorting[1].xyz;

    float color = 0.0;
    float alpha = 0.0;

    for (float k = 0.0; k < _Wiwiw_SkyboxSamplesCountVal; k++)
    {
        const float3 samplePosWS = lerp(sampleStartPosWS, sampleFinalPosWS, k * _Wiwiw_SkyboxSamplesCountRcp);

        const float clouds = Wiwiw_GetClouds(samplePosWS);
        const float shadow = Wiwiw_GetShadow(samplePosWS);

        color = lerp(color, shadow, clouds * _Wiwiw_SkyboxDensity);
        alpha = lerp(alpha, 1.0, clouds * _Wiwiw_SkyboxDensity);
    }

    _Wiwiw_CubemapTexture[indexInCube] = isValid ? float4(color, alpha, 0.0, 0.0) : float4(0.0, 0.0, 0.0, 0.0);
}

// --------------------------------------------------------
