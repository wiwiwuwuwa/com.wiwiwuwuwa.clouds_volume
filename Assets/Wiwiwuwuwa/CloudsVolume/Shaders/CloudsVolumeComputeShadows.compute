#pragma kernel CSMain
#pragma multi_compile_local WIWIW_THREADS_PER_WAVE_16 WIWIW_THREADS_PER_WAVE_32 WIWIW_THREADS_PER_WAVE_64

// --------------------------------------------------------

#include "../../Utilities/Shaders/Library/GetGlobalBufferCoord3D.hlsl"
#include "../../Utilities/Shaders/Library/GetLineIntersectPlaneY.hlsl"
#include "../../Utilities/Shaders/Library/IsNaN.hlsl"
#include "../../Utilities/Shaders/Library/WaveFrontMultiCompile.hlsl"
#include "Library/GetClouds.hlsl"

// --------------------------------------------------------

RWTexture3D<float> _Wiwiw_ShadowsTexture;

float4x4 _Wiwiw_ShadowsObjectToWorldMatrix;

float3 _Wiwiw_ShadowDirection;

float _Wiwiw_ShadowSamplesCountVal;

float _Wiwiw_ShadowSamplesCountRcp;

float _Wiwiw_ShadowDensity;

// --------------------------------------------------------

WIWIW_NUMTHREADS
void CSMain(in uint3 id : SV_DispatchThreadID)
{
    float isValid = 1.0;

    const uint3 indexInCube = Wiwiw_GetGlobalBufferIndex3D(id.x);
    const float3 coordInCube = Wiwiw_GetGlobalBufferCoord3D(id.x);

    const float3 pointPosWS = mul(_Wiwiw_ShadowsObjectToWorldMatrix, float4(coordInCube, 1.0)).xyz;
    const float3 pointDirWS = _Wiwiw_ShadowDirection;
    isValid = pointDirWS.y < 0.0 ? isValid : 0.0;

    const float cloudsUpperPlaneWS = _Wiwiw_CloudsGradientParams[3];
    const float3 intersectPosWS = Wiwiw_GetLineIntersectPlaneY(pointPosWS, pointDirWS, cloudsUpperPlaneWS);
    isValid = !Wiwiw_IsNaN(intersectPosWS) ? isValid : 0.0;

    const float3 sampleStartPosWS = intersectPosWS;
    const float3 sampleFinalPosWS = pointPosWS;

    float lightness = 1.0;

    for (float i = 0.0; i < _Wiwiw_ShadowSamplesCountVal; i++)
    {
        const float3 samplePosWS = lerp(sampleStartPosWS, sampleFinalPosWS, i * _Wiwiw_ShadowSamplesCountRcp);
        const float sampleValue = Wiwiw_GetClouds(samplePosWS);

        lightness = lerp(lightness, 0.0, sampleValue * _Wiwiw_ShadowDensity);
    }

    _Wiwiw_ShadowsTexture[indexInCube] = isValid ? lightness : 0.0;
}
